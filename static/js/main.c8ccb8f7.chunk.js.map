{"version":3,"sources":["assets/icon/arrow.svg","assets/images/title.png","assets/images/logo.png","assets/images/morty-face.png","assets/icon/fire.png","assets/images/rick-face.png","assets/images/record.png","assets/images/finish.png","shared/Button/Button.js","containers/HomePage/HomePage.js","containers/Game/components/Settings/Settings.js","shared/Spinner/Spinner.js","containers/Game/components/Play/Character/Character.js","containers/Game/components/Play/Scoreboard/Scoreboard.js","shared/ApiError/ApiError.js","containers/Game/components/Play/Play.js","containers/Game/components/Resume/Resume.js","containers/Game/Game.js","containers/Records/Records.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","btnClasses","types","push","map","type","className","join","onClick","clicked","text","HomePage","src","title","alt","logo","to","Settings","inputError","defaultValue","name","placeholder","onBlur","event","changeName","target","value","arrow","reduceQty","rounds","addQty","action","Spinner","mortySpinner","Character","img","toUpperCase","species","origin","Scoreboard","streakNumClass","streak","round","fire","score","ApiError","rickError","Play","answerResp","addedScore","display","loading","apiError","character","image","answer","showScore","Resume","resumeDisplay","record","recordPic","resumePic","send","Game","match","useRouteMatch","history","useHistory","useState","setName","setRounds","errorSetting","setErrorSetting","setLoading","setApiError","totalCharacters","setTotalCharacters","characters","setCharacters","currentRound","setCurrentRound","setScore","setStreak","setAddedScore","setShowScore","records","setRecords","useEffect","fetch","then","resp","ok","json","data","info","count","catch","err","console","error","message","changeNameHandler","addQtyHandler","prevState","reduceQtyHandler","onAction","length","requestCharacters","location","pathname","setTimeout","remainCharacter","randomNumbers","Array","from","Math","floor","random","getCharactersUrl","validCharacters","filter","status","points","scores","Object","keys","key","id","sort","a","b","finishGame","previousScore","find","user","sendNewScore","newPlayer","url","gameResult","method","body","JSON","stringify","headers","path","render","Records","bestScores","setBestScores","isLoaded","setIsLoaded","spinnerLag","setSpinnerLag","recordsUrl","App","basename","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8ccb8f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.d6d0b489.svg\";","module.exports = __webpack_public_path__ + \"static/media/title.42d6efdb.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.842f63c3.png\";","module.exports = __webpack_public_path__ + \"static/media/morty-face.617393a9.png\";","module.exports = __webpack_public_path__ + \"static/media/fire.15fc282e.png\";","module.exports = __webpack_public_path__ + \"static/media/rick-face.19af2235.png\";","module.exports = __webpack_public_path__ + \"static/media/record.bb65bdad.png\";","module.exports = __webpack_public_path__ + \"static/media/finish.82d32ff6.png\";","import React from 'react'\r\n\r\nimport './Button.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Button = (props) => {\r\n    const btnClasses = [\"custom-btn\"]\r\n    if (props.types) btnClasses.push(...props.types.map(type => \"custom-btn--\" + type))\r\n\r\n    return (\r\n    <button className={btnClasses.join(' ')} onClick={props.clicked} > {props.text} </button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    clicked: PropTypes.func,\r\n    types: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './HomePage.scss'\r\nimport title from '../../assets/images/title.png'\r\nimport logo from '../../assets/images/logo.png'\r\nimport Button from '../../shared/Button/Button'\r\n\r\nconst HomePage = () => {\r\n\r\n    return (\r\n        <div className=\"menu\">\r\n            <img className=\"menu__title\" src={title} alt=\"title\"></img>\r\n            <img className=\"menu__logo\" src={logo} alt=\"logo\"></img>\r\n            <div className=\"menu__controllers\">\r\n                <Link to=\"./records\" ><Button text=\"RECORDS\" types={[\"menu\", \"secondary\"]}/></Link>\r\n                <Link to=\"./game/settings\" ><Button text=\"NEW GAME\" types={[\"menu\"]} /></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Settings.scss'\r\nimport arrow from '../../../../assets/icon/arrow.svg'\r\nimport Button from '../../../../shared/Button/Button'\r\n\r\n\r\nconst Settings = props => (\r\n    <div className=\"settings\">\r\n        <div className=\"form\">\r\n            <div className=\"field\">\r\n                <p className=\"field__name\" >NAME</p>\r\n                <input \r\n                    className={props.inputError ? 'field__input field__input--error' : 'field__input'} \r\n                    type=\"text\" \r\n                    defaultValue={props.name} \r\n                    placeholder=\"User name\" \r\n                    onBlur={(event) => props.changeName(event.target.value)}\r\n                />\r\n                <p className={props.inputError ? 'field__error field__error--show' : 'field__error'} >\r\n                    *Invalid name! Name must have at least 3 character.\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"field__name\" >ROUNDS</p>\r\n                <div className=\"field__count\">\r\n                    <img className=\"arrow arrow--decrease\" src={arrow} alt=\"decrease quantity\" onClick={props.reduceQty}/>\r\n                    <p className=\"number\">{props.rounds}</p>\r\n                    <img className=\"arrow arrow--increase\" src={arrow} alt=\"incresae quantity\" onClick={props.addQty}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n            <Button text=\"CANCEL\" types={[\"secondary\", \"collapse\"]} clicked={() => props.action('cancel')}/>\r\n            <Button text=\"ACCEPT\" types={[\"collapse\"]} clicked={() => props.action('accept')}/>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nSettings.propTypes = {\r\n    name: PropTypes.string,\r\n    rounds: PropTypes.number,\r\n    inputError: PropTypes.bool,\r\n    changeName: PropTypes.func,\r\n    addQty: PropTypes.func,\r\n    reduceQty: PropTypes.func,\r\n    action: PropTypes.func,\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\n\r\nimport './Spinner.scss'\r\nimport mortySpinner from '../../assets/images/morty-face.png'\r\n\r\nconst Spinner = () => (\r\n    <div className=\"spinner\">\r\n        <div className=\"spinner__frame\" >\r\n            <img className=\"pic\" src={mortySpinner} alt=\"Loading\" />\r\n        </div>\r\n        <p className=\"spinner__text\"></p>\r\n    </div>\r\n)\r\n\r\nexport default Spinner","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Character.scss'\r\n\r\nconst Character = props => (\r\n    <div className=\"character\">\r\n        <img className=\"character__pic\" src={props.img} alt=\"character\"/>\r\n        <div className=\"character__info\">\r\n            <div className=\"field\">\r\n                <p className=\"field__title\">NAME: </p>\r\n                <p className=\"field__data\">{props.name.toUpperCase()}</p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"field__title\">SPECIES: </p>\r\n                <p className=\"field__data\">{props.species.toUpperCase()}</p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"field__title\">ORIGIN: </p>\r\n                <p className=\"field__data\">{props.origin.toUpperCase()}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nCharacter.propTypes = {\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n    origin: PropTypes.string,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default Character","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Scoreboard.scss'\r\nimport fire from '../../../../../assets/icon/fire.png'\r\n\r\nconst Scoreboard = props => {\r\n\r\n    let streakNumClass = 'streak-num'\r\n\r\n    if( props.streak % 5 === 0 && props.streak !== 0) {\r\n        if (props.streak > 5) streakNumClass += ' streak-num--upten'\r\n        else streakNumClass += ' streak-num--upfive'\r\n    }\r\n\r\n    return (\r\n    <div className=\"scoreboard\">\r\n        <div>\r\n            <p className=\"scoreboard__item\">ROUND</p>\r\n            <p className=\"scoreboard__item\">{props.round}</p>\r\n        </div>\r\n        <div className=\"scoreboard__streak\">\r\n            <p className={streakNumClass}>{props.streak}</p>\r\n            <img className=\"streak-logo\" src={fire} alt=\"fire\" />\r\n        </div>\r\n        <div>\r\n            <p className=\"scoreboard__item\">SCORE</p>\r\n            <p className=\"scoreboard__item\">{props.score}</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nScoreboard.propTypes = {\r\n    round: PropTypes.string,\r\n    score: PropTypes.number,\r\n    streak: PropTypes.number\r\n}\r\n\r\nexport default Scoreboard","import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './ApiError.scss'\r\nimport rickError from '../../assets/images/rick-face.png'\r\nimport Button from '../../shared/Button/Button'\r\n\r\nconst ApiError = () => (\r\n    <Fragment>\r\n        <div className=\"error\">\r\n            <div className=\"error__frame\" >\r\n                <img className=\"pic\" src={rickError} alt=\"Loading\" />\r\n            </div>\r\n            <p className=\"error__text\">Connection problem!</p>\r\n        </div>\r\n        <Link className=\"menu-btn\" to=\"/\"><Button text=\"MENU\" types={['secondary']} /></Link>\r\n    </Fragment>\r\n)\r\n\r\nexport default ApiError","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Play.scss'\r\n\r\nimport Spinner from '../../../../shared/Spinner/Spinner'\r\nimport Button from '../../../../shared/Button/Button'\r\nimport Character from './Character/Character'\r\nimport Scoreboard from './Scoreboard/Scoreboard'\r\nimport ApiError from '../../../../shared/ApiError/ApiError'\r\n\r\nconst Play = props => {\r\n\r\n    const answerResp = props.addedScore ? \r\n        <div className=\"answer-response answer-response--correct\"><p>+{props.addedScore}</p></div> :\r\n        <div className=\"answer-response answer-response--fail\"><p>FAIL</p></div>\r\n\r\n    const display = (props.loading || props.apiError) ? \r\n        <ApiError /> : \r\n        <div className=\"round\">\r\n            <Scoreboard \r\n                round={props.round}\r\n                score={props.score}\r\n                streak={props.streak}\r\n            />\r\n            <Character \r\n                img={props.character.image}\r\n                name={props.character.name}\r\n                origin={props.character.origin.name}\r\n                species={props.character.species}\r\n            />\r\n            <div className=\"btn-group\">\r\n                <Button text=\"DEAD\" types={[\"dead\", \"collapse\"]} clicked={() => props.answer('Dead')}/>\r\n                <Button text=\"ALIVE\" types={[\"collapse\"]} clicked={() => props.answer('Alive')}/>\r\n            </div>\r\n        </div>\r\n\r\n    return(\r\n        <Fragment>\r\n            {props.showScore ? answerResp : null}\r\n            <div className=\"play\">\r\n                { props.loading ? <Spinner /> : display }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nPlay.propTypes = {\r\n    loading: PropTypes.bool,\r\n    apiError: PropTypes.bool,\r\n    character: PropTypes.object,\r\n    accept: PropTypes.func,\r\n    round: PropTypes.string,\r\n    score: PropTypes.number,\r\n    showScore: PropTypes.bool,\r\n    addedScore: PropTypes.number,\r\n    streak: PropTypes.number,\r\n    answer: PropTypes.func\r\n}\r\n\r\nexport default Play","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Resume.scss'\r\nimport recordPic from '../../../../assets/images/record.png'\r\nimport resumePic from '../../../../assets/images/finish.png'\r\n\r\nimport Button from '../../../../shared/Button/Button'\r\nimport Spinner from '../../../../shared/Spinner/Spinner'\r\nimport ApiError from '../../../../shared/ApiError/ApiError'\r\n\r\nconst Resume = props => {\r\n\r\n    const resumeDisplay = props.score > props.record ? \r\n        <Fragment>\r\n            <h2 className=\"resume__title\">NEW RECORD</h2>\r\n            <img className=\"resume__pic\" src={recordPic} alt=\"record\"/>\r\n            <p>SCORE: {props.score}</p>\r\n        </Fragment> : \r\n        <Fragment>\r\n            <h2 className=\"resume__title\">RESUME</h2>\r\n            <img className=\"resume__pic\" src={resumePic} alt=\"resume\"/>\r\n            <p>SCORE: {props.score}</p>\r\n        </Fragment>\r\n\r\n    const display = props.apiError ? \r\n        <ApiError /> :\r\n        <Fragment>\r\n            {resumeDisplay}\r\n            <Button text={\"FINISH GAME\"} clicked={props.send}/>\r\n        </Fragment> \r\n\r\n    return (\r\n        <div className=\"resume\">\r\n            {typeof props.record !== 'undefined' ? display : <Spinner />}\r\n        </div>\r\n    )\r\n}\r\n\r\nResume.propTypes = {\r\n    score: PropTypes.number,\r\n    record: PropTypes.number,\r\n    send: PropTypes.func,\r\n    apiError: PropTypes.bool\r\n}\r\n\r\nexport default Resume","import React, { useState, useEffect } from 'react'\r\nimport { Switch, Route, useRouteMatch, useHistory } from 'react-router-dom'\r\n\r\nimport Settings from './components/Settings/Settings'\r\nimport Play from './components/Play/Play'\r\nimport Resume from './components/Resume/Resume'\r\n\r\nconst Game = () => {\r\n\r\n    const match = useRouteMatch()\r\n    const history = useHistory()\r\n\r\n    const [ name, setName ] = useState('')\r\n    const [ rounds, setRounds ] = useState(10)\r\n    const [ errorSetting, setErrorSetting ] = useState(false)\r\n    const [ loading, setLoading ] = useState(true)\r\n    const [ apiError, setApiError ] = useState(false)\r\n    const [ totalCharacters, setTotalCharacters ] = useState(0)\r\n    const [ characters, setCharacters ] = useState([])\r\n    const [ currentRound, setCurrentRound] = useState(0)\r\n    const [ score, setScore ] = useState(0)\r\n    const [ streak, setStreak ] = useState(0)\r\n    const [ addedScore, setAddedScore ] = useState(0)\r\n    const [ showScore, setShowScore ] = useState(false)\r\n    const [ records, setRecords ] = useState([])\r\n\r\n    // Guard\r\n    useEffect( () => {\r\n        if ( !name ) history.push('./settings')\r\n    }, [])\r\n\r\n    /**\r\n     * Settings\r\n     */\r\n    useEffect( () => {\r\n        const characterNumUrl = 'https://rickandmortyapi.com/api/character'\r\n        fetch(characterNumUrl).then(resp => {\r\n            if (resp.ok) {\r\n                resp.json().then(data => setTotalCharacters(data.info.count))\r\n            } else {\r\n                setLoading(false)\r\n                setApiError(true)\r\n            }\r\n        })\r\n        .catch( err => {\r\n            console.error(err.message)\r\n            setLoading(false)\r\n            setApiError(true)\r\n        })\r\n    }, [])\r\n\r\n    const changeNameHandler = (name) => {\r\n        setName(name)\r\n    }\r\n\r\n    const addQtyHandler = () => {\r\n        setRounds(prevState => prevState < 30 ? prevState += 5 : prevState )\r\n    }\r\n\r\n    const reduceQtyHandler = () => {\r\n        setRounds(prevState => prevState > 5 ? prevState -= 5 : prevState )\r\n    }\r\n\r\n    const onAction = type => {\r\n        if ( type === 'accept' ) {\r\n            if (name.length > 2) {\r\n                history.push('./play')\r\n                requestCharacters()\r\n            } else {\r\n                setErrorSetting(true)\r\n            }\r\n        } else {\r\n            history.push('')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play\r\n     */\r\n    useEffect(() => {\r\n        if (history.location.pathname === '/game/play') {\r\n            characters.length === rounds ? setTimeout(() => setLoading(false), 500) : requestCharacters()\r\n        }\r\n    }, [characters])\r\n\r\n    useEffect(() => {\r\n        if (showScore) {\r\n            setTimeout(() => {\r\n                setShowScore(false)\r\n                currentRound + 1 !== rounds ? setCurrentRound(prevState => prevState + 1) : history.push('./resume')\r\n            }, 1100)\r\n        }\r\n    }, [showScore])\r\n\r\n    // Ensure there are only status 'Alive' or 'Dead'\r\n    const requestCharacters = () => {\r\n        const remainCharacter = rounds - characters.length\r\n        const randomNumbers = Array.from({length: remainCharacter}, () => Math.floor(Math.random() * totalCharacters))\r\n        const getCharactersUrl = `https://rickandmortyapi.com/api/character/${randomNumbers.join(',')}`\r\n        fetch(getCharactersUrl).then( resp => {\r\n            if (resp.ok) {\r\n                resp.json().then(data => {\r\n                    if (randomNumbers.length > 1) {\r\n                        const validCharacters = data.filter(character => character.status === 'Alive' || character.status === 'Dead')\r\n                        validCharacters ? setCharacters(prevState => [...prevState , ...validCharacters]) : requestCharacters()\r\n                    } else {\r\n                        (data.status === 'Alive' || data.status === 'Dead') ? setCharacters(prevState => [...prevState, data]) : requestCharacters()\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                setApiError(true)\r\n            }\r\n        }).catch( err => {\r\n            console.error(err.message)\r\n            setLoading(false)\r\n            setApiError(true)\r\n        })\r\n    }\r\n\r\n    const answer = resp => {\r\n        if ( resp === characters[currentRound].status ) {\r\n            const points = (Math.floor(streak/5) + 1) * 100\r\n            setStreak(prevState => prevState + 1)\r\n            setScore(prevState => prevState + points)\r\n            setAddedScore(points)\r\n        } else {\r\n            setStreak(0)\r\n            setAddedScore(0)\r\n        }\r\n        setShowScore(true)\r\n    }\r\n\r\n    /**\r\n     * Resume\r\n     */\r\n    useEffect(() => {\r\n        if ( characters.length === rounds ) {\r\n            // Get global record\r\n            const recordsUrl = 'https://rick-and-morty-quiz-c69bc.firebaseio.com/records.json'\r\n            fetch(recordsUrl).then(resp => {\r\n                if (resp.ok) {\r\n                    resp.json().then(data => {\r\n                        const scores = Object.keys(data).map( key => {\r\n                            const score = data[key]\r\n                            score.id = key\r\n                            return score\r\n                        } )\r\n                        scores.sort( (a, b) =>{\r\n                            if ( a.score > b.score ) return -1\r\n                            if ( a.score < b.score ) return 1\r\n                            return 0\r\n                        })\r\n                        setRecords(scores)\r\n                    })\r\n                } else {\r\n                    setApiError(true)\r\n                }\r\n            }).catch(err => {\r\n                console.error(err.message)\r\n                setApiError(true)\r\n            })\r\n        }\r\n    }, [characters])\r\n\r\n    const finishGame = () => {\r\n\r\n        const previousScore = records.find(record => record.user === name)\r\n\r\n        const sendNewScore = (user, newPlayer = true) => {\r\n            const url = `https://rick-and-morty-quiz-c69bc.firebaseio.com/records${newPlayer ? '' : ('/'+previousScore.id) }.json`\r\n            const gameResult = {\r\n                user: user,\r\n                score: score\r\n            }\r\n            fetch(url, {\r\n                method: newPlayer ? 'POST' : 'PUT',\r\n                body: JSON.stringify(gameResult),\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then(resp => resp.json())\r\n            .then(() => history.push(''))\r\n            .catch(() => setApiError(true))\r\n        }   \r\n\r\n        if (typeof previousScore !== 'undefined' && score > previousScore.score) {\r\n            sendNewScore(previousScore.user, false)\r\n        } else if (typeof previousScore !== 'undefined') {\r\n            return history.push('')\r\n        } else {\r\n            sendNewScore(name)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path = { `${match.path}/settings` } render = {\r\n                ()  => <Settings \r\n                        addQty = { addQtyHandler } \r\n                        reduceQty = { reduceQtyHandler } \r\n                        changeName = { changeNameHandler }\r\n                        action = { onAction }\r\n                        name = { name } \r\n                        rounds = { rounds }\r\n                        inputError = { errorSetting }\r\n                    />\r\n            }/>\r\n            <Route path={ `${match.path}/play` } render={\r\n                () => <Play\r\n                        loading = { loading }\r\n                        apiError = { apiError }\r\n                        character = { characters[currentRound] }\r\n                        round = { [ currentRound + 1 , rounds ].join(' / ')}\r\n                        score = { score }\r\n                        showScore = { showScore }\r\n                        addedScore = { addedScore }\r\n                        streak = { streak }\r\n                        answer = { answer }\r\n                    />\r\n            }/>\r\n            <Route path={ `${match.path}/resume` } render={\r\n                () => <Resume \r\n                        send = { finishGame }\r\n                        record = { records[0].score }\r\n                        score = { score }\r\n                        apiError = { apiError }\r\n                />\r\n            }\r\n            />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Game","import React, { useEffect, useState, Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './Records.scss'\r\nimport Button from '../../shared/Button/Button'\r\nimport Spinner from '../../shared/Spinner/Spinner'\r\nimport ApiError from '../../shared/ApiError/ApiError'\r\n\r\nconst Records = () => {\r\n\r\n    const [ bestScores, setBestScores ] = useState([])\r\n    const [ isLoaded, setIsLoaded ] = useState(false)\r\n    const [ spinnerLag, setSpinnerLag ] = useState(false)\r\n\r\n    useEffect( () => {\r\n\r\n        const recordsNum = 10\r\n        const recordsUrl = `https://rick-and-morty-quiz-c69bc.firebaseio.com/records.json?orderBy=\"score\"&limitToLast=${recordsNum}`\r\n\r\n        fetch(recordsUrl).then(resp =>{\r\n            if (resp.ok) {\r\n                resp.json().then(data => {\r\n                    const scores = Object.keys(data).map( key => {\r\n                        const score = data[key]\r\n                        score.id = key\r\n                        return score\r\n                    } )\r\n                    scores.sort( (a, b) =>{\r\n                        if ( a.score > b.score ) return -1\r\n                        if ( a.score < b.score ) return 1\r\n                        return 0\r\n                    })\r\n                    setIsLoaded(true)\r\n                    setBestScores(scores)\r\n                })\r\n            } else {\r\n                setIsLoaded(true)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.error(err.message)\r\n            setIsLoaded(true)\r\n        })\r\n        setTimeout(() => setSpinnerLag(true), 1000)\r\n        }, [])  \r\n\r\n        const display = bestScores.length ?\r\n        <div className=\"records\">\r\n            <h2 className=\"records__title\">BEST SCORES</h2>\r\n            <div className=\"records__scores\">\r\n                <div className=\"header\"><p>USER</p><p>SCORE</p></div>\r\n                {bestScores.map( score => <div key={score.id} className=\"row\"><p>{score.user}</p><p>{score.score}</p></div>)}\r\n            </div>\r\n            <Link to=\"/\"><Button text=\"MENU\" types={['secondary']} /></Link>\r\n        </div> : <ApiError />\r\n    \r\n    return(\r\n        <Fragment>\r\n            {(isLoaded && spinnerLag) ? display : <Spinner />}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Records","import React from 'react'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\n\r\nimport './App.scss'\r\nimport HomePage from './HomePage/HomePage'\r\nimport Game from './Game/Game'\r\nimport Records from './Records/Records'\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <HashRouter basename='/'>\r\n      <div className=\"app\">\r\n        <Switch>\r\n          <Route path=\"/game\" component={ Game } />\r\n          <Route path=\"/records\" component={ Records } />\r\n          <Route path=\"/\" component={ HomePage } />\r\n        </Switch>\r\n      </div>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}