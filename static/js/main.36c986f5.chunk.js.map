{"version":3,"sources":["assets/icon/arrow.svg","assets/images/title.png","assets/images/logo.png","assets/images/morty-face.png","assets/icon/fire.png","assets/images/record.png","assets/images/finish.png","shared/Button/Button.js","containers/HomePage/HomePage.js","containers/Game/components/Settings/Settings.js","shared/Spinner/Spinner.js","containers/Game/components/Play/Character/Character.js","containers/Game/components/Play/Scoreboard/Scoreboard.js","containers/Game/components/Play/Play.js","containers/Game/components/Resume/Resume.js","containers/Game/Game.js","containers/Records/Records.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","btnClasses","types","push","map","type","className","join","onClick","clicked","text","HomePage","src","title","alt","logo","to","Settings","inputError","defaultValue","name","placeholder","onBlur","event","changeName","target","value","arrow","reduceQty","rounds","addQty","action","Spinner","mortySpinner","Character","img","toUpperCase","species","origin","Scoreboard","streakNumClass","streak","round","fire","score","Play","answerResp","addedScore","showScore","loading","character","image","answer","Resume","resumeDisplay","record","recordPic","resumePic","finish","Game","match","useRouteMatch","history","useHistory","useState","setName","setRounds","errorSetting","setErrorSetting","setLoading","characters","setCharacters","currentRound","setCurrentRound","setScore","setStreak","setAddedScore","setShowScore","undefined","setRecord","useEffect","changeNameHandler","addQtyHandler","prevState","reduceQtyHandler","onAction","length","requestCharacters","location","pathname","setTimeout","sendGameResult","gameResult","user","axios","post","then","remainCharacter","randomNumbers","Array","from","Math","floor","random","get","resp","validCharacters","data","filter","status","points","Object","keys","finishGame","path","render","Records","bestScores","setBestScores","scores","key","id","sort","a","b","display","App","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36c986f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.d6d0b489.svg\";","module.exports = __webpack_public_path__ + \"static/media/title.42d6efdb.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.842f63c3.png\";","module.exports = __webpack_public_path__ + \"static/media/morty-face.617393a9.png\";","module.exports = __webpack_public_path__ + \"static/media/fire.15fc282e.png\";","module.exports = __webpack_public_path__ + \"static/media/record.bb65bdad.png\";","module.exports = __webpack_public_path__ + \"static/media/finish.82d32ff6.png\";","import React from 'react'\r\n\r\nimport './Button.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Button = (props) => {\r\n    const btnClasses = [\"custom-btn\"]\r\n    if (props.types) btnClasses.push(...props.types.map(type => \"custom-btn--\" + type))\r\n\r\n    return (\r\n    <button className={btnClasses.join(' ')} onClick={props.clicked} > {props.text} </button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    clicked: PropTypes.func,\r\n    types: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default Button","import React from 'react'\r\n\r\nimport './HomePage.scss'\r\nimport title from '../../assets/images/title.png'\r\nimport logo from '../../assets/images/logo.png'\r\nimport Button from '../../shared/Button/Button'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst HomePage = () => {\r\n    \r\n    return (\r\n        <div className=\"menu\">\r\n            <img className=\"menu__title\" src={title} alt=\"title\"></img>\r\n            <img className=\"menu__logo\" src={logo} alt=\"logo\"></img>\r\n            <div className=\"menu__controllers\">\r\n                <Link to=\"/records\"><Button text=\"RECORDS\" types={[\"menu\", \"secondary\"]}/></Link>\r\n                <Link to=\"/game/settings\"><Button text=\"NEW GAME\" types={[\"menu\"]} /></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Settings.scss'\r\nimport arrow from '../../../../assets/icon/arrow.svg'\r\nimport Button from '../../../../shared/Button/Button'\r\n\r\n\r\nconst Settings = props => (\r\n    <div className=\"settings\">\r\n        <div className=\"form\">\r\n            <div className=\"field\">\r\n                <p className=\"field__name\" >NAME</p>\r\n                <input \r\n                    className={props.inputError ? 'field__input field__input--error' : 'field__input'} \r\n                    type=\"text\" \r\n                    defaultValue={props.name} \r\n                    placeholder=\"User name\" \r\n                    onBlur={(event) => props.changeName(event.target.value)}\r\n                />\r\n                <p className={props.inputError ? 'field__error field__error--show' : 'field__error'} >\r\n                    *Invalid name! Name must have at least 3 character.\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"field__name\" >ROUNDS</p>\r\n                <div className=\"field__count\">\r\n                    <img className=\"arrow arrow--decrease\" src={arrow} alt=\"decresae quantity\" onClick={props.reduceQty}/>\r\n                    <p className=\"number\">{props.rounds}</p>\r\n                    <img className=\"arrow arrow--increase\" src={arrow} alt=\"incresae quantity\" onClick={props.addQty}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n            <Button text=\"CANCEL\" types={[\"secondary\", \"collapse\"]} clicked={() => props.action('cancel')}/>\r\n            <Button text=\"ACCEPT\" types={[\"collapse\"]} clicked={() => props.action('accept')}/>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nSettings.propTypes = {\r\n    name: PropTypes.string,\r\n    rounds: PropTypes.number,\r\n    inputError: PropTypes.bool,\r\n    changeName: PropTypes.func,\r\n    addQty: PropTypes.func,\r\n    reduceQty: PropTypes.func,\r\n    accept: PropTypes.func,\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\n\r\nimport './Spinner.scss'\r\nimport mortySpinner from '../../assets/images/morty-face.png'\r\n\r\nconst Spinner = () => (\r\n    <div className=\"spinner\">\r\n        <div className=\"spinner__frame\" >\r\n            <img className=\"pic\" src={mortySpinner} alt=\"Loading\" />\r\n        </div>\r\n        <p className=\"spinner__text\"></p>\r\n    </div>\r\n)\r\n\r\nexport default Spinner","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Character.scss'\r\n\r\nconst Character = props => (\r\n    <div className=\"character\">\r\n        <img className=\"character__pic\" src={props.img} alt=\"character\"/>\r\n        <div className=\"character__info\">\r\n            <div className=\"field\">\r\n                <p className=\"field__title\">NAME: </p>\r\n                <p className=\"field__data\">{props.name.toUpperCase()}</p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"field__title\">SPECIES: </p>\r\n                <p className=\"field__data\">{props.species.toUpperCase()}</p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"field__title\">ORIGIN: </p>\r\n                <p className=\"field__data\">{props.origin.toUpperCase()}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nCharacter.propTypes = {\r\n    name: PropTypes.string,\r\n    species: PropTypes.string,\r\n    origin: PropTypes.string,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default Character","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Scoreboard.scss'\r\nimport fire from '../../../../../assets/icon/fire.png'\r\n\r\nconst Scoreboard = props => {\r\n\r\n    let streakNumClass = 'streak-num'\r\n\r\n    if( props.streak % 5 === 0 && props.streak !== 0) {\r\n        if (props.streak > 5) streakNumClass += ' streak-num--upten'\r\n        else streakNumClass += ' streak-num--upfive'\r\n    }\r\n\r\n    return (\r\n    <div className=\"scoreboard\">\r\n        <div>\r\n            <p className=\"scoreboard__item\">ROUND</p>\r\n            <p className=\"scoreboard__item\">{props.round}</p>\r\n        </div>\r\n        <div className=\"scoreboard__streak\">\r\n            <p className={streakNumClass}>{props.streak}</p>\r\n            <img className=\"streak-logo\" src={fire} alt=\"fire\" />\r\n        </div>\r\n        <div>\r\n            <p className=\"scoreboard__item\">SCORE</p>\r\n            <p className=\"scoreboard__item\">{props.score}</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nScoreboard.propTypes = {\r\n    round: PropTypes.string,\r\n    score: PropTypes.number,\r\n    streak: PropTypes.number\r\n}\r\n\r\nexport default Scoreboard","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Play.scss'\r\n\r\nimport Spinner from '../../../../shared/Spinner/Spinner'\r\nimport Button from '../../../../shared/Button/Button'\r\nimport Character from './Character/Character'\r\nimport Scoreboard from './Scoreboard/Scoreboard'\r\n\r\nconst Play = props => {\r\n\r\n    const answerResp = props.addedScore ? \r\n        <div className=\"answer-response answer-response--correct\"><p>+{props.addedScore}</p></div> :\r\n        <div className=\"answer-response answer-response--fail\"><p>FAIL</p></div>\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            {props.showScore ? answerResp : null}\r\n            <div className=\"play\">\r\n                {\r\n                    props.loading ?\r\n                    <Spinner /> : \r\n                    <div className=\"round\">\r\n                        <Scoreboard \r\n                            round={props.round}\r\n                            score={props.score}\r\n                            streak={props.streak}\r\n                        />\r\n                        <Character \r\n                            img={props.character.image}\r\n                            name={props.character.name}\r\n                            origin={props.character.origin.name}\r\n                            species={props.character.species}\r\n                        />\r\n                        <div className=\"btn-group\">\r\n                            <Button text=\"DEAD\" types={[\"dead\", \"collapse\"]} clicked={() => props.answer('Dead')}/>\r\n                            <Button text=\"ALIVE\" types={[\"collapse\"]} clicked={() => props.answer('Alive')}/>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nPlay.propTypes = {\r\n    loading: PropTypes.bool,\r\n    character: PropTypes.object,\r\n    accept: PropTypes.func,\r\n    round: PropTypes.string,\r\n    score: PropTypes.number,\r\n    showScore: PropTypes.bool,\r\n    addedScore: PropTypes.number,\r\n    streak: PropTypes.number,\r\n    answer: PropTypes.func\r\n}\r\n\r\nexport default Play","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Resume.scss'\r\nimport recordPic from '../../../../assets/images/record.png'\r\nimport resumePic from '../../../../assets/images/finish.png'\r\n\r\nimport Button from '../../../../shared/Button/Button'\r\n\r\nconst Resume = props => {\r\n\r\n    const resumeDisplay = props.score > props.record ? \r\n        <Fragment>\r\n            <h2 className=\"resume__title\">RECORD</h2>\r\n            <img className=\"resume__pic\" src={recordPic} alt=\"record\"/>\r\n            <p>SCORE: {props.score}</p>\r\n        </Fragment> : \r\n        <Fragment>\r\n            <h2 className=\"resume__title\">RESUME</h2>\r\n            <img className=\"resume__pic\" src={resumePic} alt=\"resume\"/>\r\n            <p className=\"resume__score\" >SCORE: {props.score}</p>\r\n        </Fragment>\r\n\r\n    return (\r\n    <div className=\"resume\">\r\n        {\r\n            typeof props.record !== 'undefined' ? \r\n            <Fragment>\r\n                {resumeDisplay}\r\n                <Button text={\"FINISH GAME\"} clicked={props.finish}/>\r\n            </Fragment> : null\r\n        }\r\n    </div>\r\n    )\r\n}\r\n\r\nResume.propTypes = {\r\n    finish: PropTypes.func,\r\n    score: PropTypes.number,\r\n    record: PropTypes.number\r\n}\r\n\r\nexport default Resume","import React, { useState, useEffect } from 'react'\r\nimport { Switch, Route, useRouteMatch, useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nimport Settings from './components/Settings/Settings'\r\nimport Play from './components/Play/Play'\r\nimport Resume from './components/Resume/Resume'\r\n\r\nconst Game = () => {\r\n\r\n    const match = useRouteMatch()\r\n    const history = useHistory()\r\n\r\n    const [ name, setName ] = useState('')\r\n    const [ rounds, setRounds ] = useState(10)\r\n    const [ errorSetting, setErrorSetting ] = useState(false)\r\n    const [ loading, setLoading ] = useState(true)\r\n    const [ characters, setCharacters ] = useState([])\r\n    const [ currentRound, setCurrentRound] = useState(0)\r\n    const [ score, setScore ] = useState(0)\r\n    const [ streak, setStreak ] = useState(0)\r\n    const [ addedScore, setAddedScore ] = useState(0)\r\n    const [ showScore, setShowScore ] = useState(false)\r\n    const [ record, setRecord ] = useState(undefined)\r\n\r\n    // Guard\r\n    useEffect( () => {\r\n        if ( !name ) history.push('./settings')\r\n    }, [])\r\n\r\n    /**\r\n     * Settings\r\n     */\r\n    const changeNameHandler = (name) => {\r\n        setName(name)\r\n    }\r\n\r\n    const addQtyHandler = () => {\r\n        setRounds(prevState => prevState < 30 ? prevState += 5 : prevState )\r\n    }\r\n\r\n    const reduceQtyHandler = () => {\r\n        setRounds(prevState => prevState > 5 ? prevState -= 5 : prevState )\r\n    }\r\n\r\n    const onAction = type => {\r\n        if ( type === 'accept' ) {\r\n            if (name.length > 2) {\r\n                history.push('./play')\r\n                requestCharacters()\r\n            } else {\r\n                setErrorSetting(true)\r\n            }\r\n        } else {\r\n            history.push('')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play\r\n     */\r\n    useEffect(() => {\r\n        if (history.location.pathname === '/game/play') {\r\n            characters.length === rounds ? setTimeout(() => setLoading(false), 500) : requestCharacters()\r\n        }\r\n    }, [characters])\r\n\r\n    useEffect(() => {\r\n        if (showScore) {\r\n            setTimeout(() => {\r\n                setShowScore(false)\r\n                currentRound + 1 !== rounds ? setCurrentRound(prevState => prevState + 1) : sendGameResult()\r\n            }, 1100)\r\n        }\r\n    }, [showScore])\r\n\r\n    const sendGameResult = () => {\r\n        const gameResult = {\r\n            user: name,\r\n            score: score\r\n        }\r\n        axios.post('https://rick-and-morty-quiz-c69bc.firebaseio.com/records.json', gameResult)\r\n            .then( () => history.push('./resume'))\r\n    }\r\n    \r\n    // Ensure there are only status 'Alive' or 'Dead'\r\n    const requestCharacters = () => {\r\n        const remainCharacter = rounds - characters.length\r\n        const totalCharacters = 591\r\n        const randomNumbers = Array.from({length: remainCharacter}, () => Math.floor(Math.random() * totalCharacters))\r\n        axios.get(`https://rickandmortyapi.com/api/character/${randomNumbers.join(',')}`)\r\n            .then(resp => {\r\n                if (randomNumbers.length > 1) {\r\n                    const validCharacters = resp.data.filter(character => character.status === 'Alive' || character.status === 'Dead')\r\n                    validCharacters ? setCharacters(prevState => [...prevState , ...validCharacters]) : requestCharacters()\r\n                } else {\r\n                    (resp.data.status === 'Alive' || resp.data.status === 'Dead') ? setCharacters(prevState => [...prevState, resp.data]) : requestCharacters()\r\n                }\r\n            })\r\n    }\r\n\r\n    const answer = resp => {\r\n        if ( resp === characters[currentRound].status ) {\r\n            const points = (Math.floor(streak/5) + 1) * 100\r\n            setStreak(prevState => prevState + 1)\r\n            setScore(prevState => prevState + points)\r\n            setAddedScore(points)\r\n        } else {\r\n            setStreak(0)\r\n            setAddedScore(0)\r\n        }\r\n        setShowScore(true)\r\n    }\r\n    \r\n\r\n    /**\r\n     * Resume\r\n     */\r\n    useEffect(() => {\r\n        if ( history.location.pathname === '/game/resume' ) {\r\n            axios.get('https://rick-and-morty-quiz-c69bc.firebaseio.com/records.json?orderBy=%22score%22&limitToLast=1')\r\n                .then(resp => {\r\n                    resp.data ? setRecord(resp.data[Object.keys(resp.data)[0]].score) : setRecord(0)\r\n                })\r\n        }\r\n    }, [history.location.pathname])\r\n\r\n    const finishGame = () => history.push('')\r\n\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path = { `${match.path}/settings` } render = {\r\n                ()  => <Settings \r\n                        addQty = { addQtyHandler } \r\n                        reduceQty = { reduceQtyHandler } \r\n                        changeName = { changeNameHandler }\r\n                        action = { onAction }\r\n                        name = { name } \r\n                        rounds = { rounds }\r\n                        inputError = { errorSetting }\r\n                    />\r\n            }/>\r\n            <Route path={ `${match.path}/play` } render={\r\n                () => <Play\r\n                        loading = { loading }\r\n                        character = { characters[currentRound] }\r\n                        round = { [ currentRound + 1 , rounds ].join(' / ')}\r\n                        score = { score }\r\n                        showScore = { showScore }\r\n                        addedScore = { addedScore }\r\n                        streak = { streak }\r\n                        answer = { answer }\r\n                    />\r\n            }/>\r\n            <Route path={ `${match.path}/resume` } render={\r\n                () => <Resume \r\n                        finish = { finishGame }\r\n                        record = { record }\r\n                        score = { score }\r\n                />\r\n            }\r\n            />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Game","import React, { useEffect, useState, Fragment } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport './Records.scss'\r\nimport Button from '../../shared/Button/Button'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Records = () => {\r\n\r\n    const [ bestScores, setBestScores ] = useState([])\r\n\r\n    useEffect( () => {\r\n        axios.get('https://rick-and-morty-quiz-c69bc.firebaseio.com/records.json?orderBy=\"score\"&limitToLast=10')\r\n            .then(resp => {\r\n                const scores = Object.keys(resp.data).map( key => {\r\n                    const score = resp.data[key]\r\n                    score.id = key\r\n                    return score\r\n                } )\r\n                scores.sort( (a, b) =>{\r\n                    if ( a.score > b.score ) return -1\r\n                    if ( a.score < b.score ) return 1\r\n                    return 0\r\n                })\r\n                setBestScores(scores)\r\n            })\r\n    }, [])  \r\n    \r\n    const display = bestScores ?\r\n        <div className=\"records\">\r\n            <h2 className=\"records__title\">BEST SCORES</h2>\r\n            <div className=\"records__scores\">\r\n                <div className=\"header\"><p>USER</p><p>SCORE</p></div>\r\n                {bestScores.map( score => <div key={score.id} className=\"row\"><p>{score.user}</p><p>{score.score}</p></div>)}\r\n            </div>\r\n            <Link to=\"/\"><Button text=\"MENU\" types={['secondary']} /></Link>\r\n        </div> : null\r\n    \r\n    return(\r\n        <Fragment>\r\n            {display}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Records","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport './App.scss'\r\nimport HomePage from './HomePage/HomePage'\r\nimport Game from './Game/Game'\r\nimport Records from './Records/Records'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Switch>\r\n        <Route path=\"/game\" component={ Game } />\r\n        <Route path=\"/records\" component={ Records } />\r\n        <Route path=\"/\" component={ HomePage } />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}